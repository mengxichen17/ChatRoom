{"ast":null,"code":"var _jsxFileName = \"/Users/mengxi/Programming/NimbleChatRoom/nimble_chat_room/src/components/ChatWindow/ChatWindow2.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport ChatBar from './ChatBar';\nimport ChatBody from './ChatBody';\nimport ChatFooter from './ChatFooter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = ({\n  socket,\n  onRouteChange,\n  username\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [typingStatus, setTypingStatus] = useState('');\n  const lastMessageRef = useRef(null);\n  async function getChatHistory() {\n    try {\n      const response = await fetch('http://localhost:4000/chathistory', {\n        method: 'get'\n        // headers: {'Content-Type': 'application/json'},\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const chatHistory = await response.json();\n      const chatHistorySorted = chatHistory.sort((a, b) => {\n        // Sort the array of messages (in json) by the message's time\n        const timeA = new Date(a.time);\n        const timeB = new Date(b.time);\n        return timeA - timeB;\n      });\n      const keys_to_keep = ['name', 'message'];\n      // const result = array => array.map(o => keys_to_keep.reduce((acc, curr) => {\n      //     acc[curr] = o[curr];\n      //     return acc;\n      //   }, {}));\n      // console.log(result);\n      return chatHistorySorted;\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n    }\n  }\n  getChatHistory().then(chatHistory => {\n    console.log(chatHistory.length);\n    setMessages();\n  }).catch(err => console.error(\"Error\"));\n  useEffect(() => {\n    socket.on('messageResponse', data => setMessages([...messages, data]));\n  }, [socket, messages]);\n  console.log(\"the current messages: \", messages);\n  // useEffect(() => {\n  // socket.on('messageResponse', (data) => setMessages([...messages, data]));\n  // }, [socket, messages]);\n\n  useEffect(() => {\n    var _lastMessageRef$curre;\n    // scroll to bottom every time messages change\n    (_lastMessageRef$curre = lastMessageRef.current) === null || _lastMessageRef$curre === void 0 ? void 0 : _lastMessageRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__main\",\n      children: [/*#__PURE__*/_jsxDEV(ChatBody, {\n        messages: messages,\n        lastMessageRef: lastMessageRef,\n        onRouteChange: onRouteChange,\n        username: username,\n        socket: socket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChatFooter, {\n        socket: socket,\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"MGToXQHho0vAPn4saVLSXSqPPBU=\");\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ChatBar","ChatBody","ChatFooter","jsxDEV","_jsxDEV","ChatPage","socket","onRouteChange","username","_s","messages","setMessages","typingStatus","setTypingStatus","lastMessageRef","getChatHistory","response","fetch","method","ok","Error","chatHistory","json","chatHistorySorted","sort","a","b","timeA","Date","time","timeB","keys_to_keep","error","console","then","log","length","catch","err","on","data","_lastMessageRef$curre","current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mengxi/Programming/NimbleChatRoom/nimble_chat_room/src/components/ChatWindow/ChatWindow2.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport ChatBar from './ChatBar';\nimport ChatBody from './ChatBody';\nimport ChatFooter from './ChatFooter';\n\nconst ChatPage = ({ socket, onRouteChange, username }) => {\n    const [messages, setMessages] = useState([]);  \n    const [typingStatus, setTypingStatus] = useState('');\n    const lastMessageRef = useRef(null); \n\n    async function getChatHistory() {\n        try {\n            const response = await fetch('http://localhost:4000/chathistory', {\n                method: 'get',\n                // headers: {'Content-Type': 'application/json'},\n            });\n    \n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n    \n            const chatHistory = await response.json();\n            const chatHistorySorted = chatHistory.sort((a, b) => {\n                // Sort the array of messages (in json) by the message's time\n                const timeA = new Date(a.time);\n                const timeB = new Date(b.time);\n                return timeA - timeB;\n              });\n            const keys_to_keep = ['name', 'message'];\n            // const result = array => array.map(o => keys_to_keep.reduce((acc, curr) => {\n            //     acc[curr] = o[curr];\n            //     return acc;\n            //   }, {}));\n            // console.log(result);\n            return chatHistorySorted;\n        } catch (error) {\n            console.error('Error fetching chat history:', error);\n        }\n    }\n\n    getChatHistory()\n    .then(chatHistory => {\n        console.log(chatHistory.length);\n        setMessages();\n    })\n    .catch(err => console.error(\"Error\"))\n\n    useEffect(() => {\n        socket.on('messageResponse', (data) => setMessages([...messages, data]));\n      }, [socket, messages]);\n\n    console.log(\"the current messages: \", messages);\n    // useEffect(() => {\n    // socket.on('messageResponse', (data) => setMessages([...messages, data]));\n    // }, [socket, messages]);\n\n    useEffect(() => {\n    // scroll to bottom every time messages change\n    lastMessageRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [messages]);\n\n    return (\n        <div className=\"chat\">\n        {/* <ChatBar socket={socket} /> */}\n        <div className=\"chat__main\">\n            <ChatBody messages={messages} lastMessageRef={lastMessageRef} onRouteChange={onRouteChange} username={username} socket={socket}/>\n            <ChatFooter socket={socket} username={username}/>\n        </div>\n        </div>\n    );\n};\n\nexport default ChatPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}