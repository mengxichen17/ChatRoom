{"ast":null,"code":"var _jsxFileName = \"/Users/mengxi/Programming/NimbleChatRoom/nimble_chat_room/src/components/ChatWindow/ChatWindow2.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport ChatBar from './ChatBar';\nimport ChatBody from './ChatBody';\nimport ChatFooter from './ChatFooter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatPage = ({\n  socket,\n  onRouteChange,\n  username\n}) => {\n  _s();\n  const [messages, setMessages] = useState(getChatHistory());\n  const [typingStatus, setTypingStatus] = useState('');\n  const lastMessageRef = useRef(null);\n\n  // async function getChatHistory() {\n  //     try {\n  //         const response = await fetch('http://localhost:4000/chathistory', {\n  //             method: 'get',\n  //             // headers: {'Content-Type': 'application/json'},\n  //         });\n\n  //         if (!response.ok) {\n  //             throw new Error('Network response was not ok');\n  //         }\n\n  //         const chatHistory = await response.json();\n  //         const chatHistorySorted = chatHistory.sort((a, b) => {\n  //             // Sort the array of messages (in json) by the message's time\n  //             const timeA = new Date(a.time);\n  //             const timeB = new Date(b.time);\n  //             return timeA - timeB;\n  //           });\n  //         const result = [];\n\n  //         return chatHistorySorted;\n  //     } catch (error) {\n  //         console.error('Error fetching chat history:', error);\n  //     }\n  // }\n\n  useEffect(() => {\n    socket.on('messageResponse', data => setMessages([...messages, data]));\n  }, [socket, messages]);\n  console.log(\"the current messages: \", messages);\n  // useEffect(() => {\n  // socket.on('messageResponse', (data) => setMessages([...messages, data]));\n  // }, [socket, messages]);\n\n  useEffect(() => {\n    var _lastMessageRef$curre;\n    // scroll to bottom every time messages change\n    (_lastMessageRef$curre = lastMessageRef.current) === null || _lastMessageRef$curre === void 0 ? void 0 : _lastMessageRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__main\",\n      children: [/*#__PURE__*/_jsxDEV(ChatBody, {\n        messages: messages,\n        lastMessageRef: lastMessageRef,\n        onRouteChange: onRouteChange,\n        username: username,\n        socket: socket\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChatFooter, {\n        socket: socket,\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatPage, \"ViTZHAzB8Op3gYxbCPovqx78yVg=\");\n_c = ChatPage;\nexport default ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ChatBar","ChatBody","ChatFooter","jsxDEV","_jsxDEV","ChatPage","socket","onRouteChange","username","_s","messages","setMessages","getChatHistory","typingStatus","setTypingStatus","lastMessageRef","on","data","console","log","_lastMessageRef$curre","current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mengxi/Programming/NimbleChatRoom/nimble_chat_room/src/components/ChatWindow/ChatWindow2.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport ChatBar from './ChatBar';\nimport ChatBody from './ChatBody';\nimport ChatFooter from './ChatFooter';\n\nconst ChatPage = ({ socket, onRouteChange, username }) => {\n    const [messages, setMessages] = useState(getChatHistory());  \n    const [typingStatus, setTypingStatus] = useState('');\n    const lastMessageRef = useRef(null); \n\n    // async function getChatHistory() {\n    //     try {\n    //         const response = await fetch('http://localhost:4000/chathistory', {\n    //             method: 'get',\n    //             // headers: {'Content-Type': 'application/json'},\n    //         });\n    \n    //         if (!response.ok) {\n    //             throw new Error('Network response was not ok');\n    //         }\n    \n    //         const chatHistory = await response.json();\n    //         const chatHistorySorted = chatHistory.sort((a, b) => {\n    //             // Sort the array of messages (in json) by the message's time\n    //             const timeA = new Date(a.time);\n    //             const timeB = new Date(b.time);\n    //             return timeA - timeB;\n    //           });\n    //         const result = [];\n            \n    //         return chatHistorySorted;\n    //     } catch (error) {\n    //         console.error('Error fetching chat history:', error);\n    //     }\n    // }\n\n    useEffect(() => {\n        socket.on('messageResponse', (data) => setMessages([...messages, data]));\n      }, [socket, messages]);\n\n    console.log(\"the current messages: \", messages);\n    // useEffect(() => {\n    // socket.on('messageResponse', (data) => setMessages([...messages, data]));\n    // }, [socket, messages]);\n\n    useEffect(() => {\n    // scroll to bottom every time messages change\n    lastMessageRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [messages]);\n\n    return (\n        <div className=\"chat\">\n        {/* <ChatBar socket={socket} /> */}\n        <div className=\"chat__main\">\n            <ChatBody messages={messages} lastMessageRef={lastMessageRef} onRouteChange={onRouteChange} username={username} socket={socket}/>\n            <ChatFooter socket={socket} username={username}/>\n        </div>\n        </div>\n    );\n};\n\nexport default ChatPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,MAAM;EAAEC,aAAa;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAACc,cAAc,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAMiB,cAAc,GAAGhB,MAAM,CAAC,IAAI,CAAC;;EAEnC;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEAF,SAAS,CAAC,MAAM;IACZS,MAAM,CAACU,EAAE,CAAC,iBAAiB,EAAGC,IAAI,IAAKN,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEO,IAAI,CAAC,CAAC,CAAC;EAC1E,CAAC,EAAE,CAACX,MAAM,EAAEI,QAAQ,CAAC,CAAC;EAExBQ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAET,QAAQ,CAAC;EAC/C;EACA;EACA;;EAEAb,SAAS,CAAC,MAAM;IAAA,IAAAuB,qBAAA;IAChB;IACA,CAAAA,qBAAA,GAAAL,cAAc,CAACM,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACb,QAAQ,CAAC,CAAC;EAEd,oBACIN,OAAA;IAAKoB,SAAS,EAAC,MAAM;IAAAC,QAAA,eAErBrB,OAAA;MAAKoB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACvBrB,OAAA,CAACH,QAAQ;QAACS,QAAQ,EAAEA,QAAS;QAACK,cAAc,EAAEA,cAAe;QAACR,aAAa,EAAEA,aAAc;QAACC,QAAQ,EAAEA,QAAS;QAACF,MAAM,EAAEA;MAAO;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACjIzB,OAAA,CAACF,UAAU;QAACI,MAAM,EAAEA,MAAO;QAACE,QAAQ,EAAEA;MAAS;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACpB,EAAA,CAtDIJ,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAwDd,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}